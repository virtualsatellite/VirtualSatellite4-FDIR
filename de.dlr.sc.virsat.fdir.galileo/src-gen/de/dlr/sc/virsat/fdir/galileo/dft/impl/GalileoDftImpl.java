/**
 * generated by Xtext 2.12.0
 */
package de.dlr.sc.virsat.fdir.galileo.dft.impl;

import de.dlr.sc.virsat.fdir.galileo.dft.DftPackage;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoDft;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoFaultTreeNode;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Galileo Dft</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoDftImpl#getRoot <em>Root</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoDftImpl#getGates <em>Gates</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoDftImpl#getBasicEvents <em>Basic Events</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GalileoDftImpl extends MinimalEObjectImpl.Container implements GalileoDft
{
  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected GalileoFaultTreeNode root;

  /**
   * The cached value of the '{@link #getGates() <em>Gates</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGates()
   * @generated
   * @ordered
   */
  protected EList<GalileoFaultTreeNode> gates;

  /**
   * The cached value of the '{@link #getBasicEvents() <em>Basic Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasicEvents()
   * @generated
   * @ordered
   */
  protected EList<GalileoFaultTreeNode> basicEvents;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GalileoDftImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DftPackage.Literals.GALILEO_DFT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GalileoFaultTreeNode getRoot()
  {
    if (root != null && root.eIsProxy())
    {
      InternalEObject oldRoot = (InternalEObject)root;
      root = (GalileoFaultTreeNode)eResolveProxy(oldRoot);
      if (root != oldRoot)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DftPackage.GALILEO_DFT__ROOT, oldRoot, root));
      }
    }
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GalileoFaultTreeNode basicGetRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRoot(GalileoFaultTreeNode newRoot)
  {
    GalileoFaultTreeNode oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_DFT__ROOT, oldRoot, root));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GalileoFaultTreeNode> getGates()
  {
    if (gates == null)
    {
      gates = new EObjectContainmentEList<GalileoFaultTreeNode>(GalileoFaultTreeNode.class, this, DftPackage.GALILEO_DFT__GATES);
    }
    return gates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GalileoFaultTreeNode> getBasicEvents()
  {
    if (basicEvents == null)
    {
      basicEvents = new EObjectContainmentEList<GalileoFaultTreeNode>(GalileoFaultTreeNode.class, this, DftPackage.GALILEO_DFT__BASIC_EVENTS);
    }
    return basicEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_DFT__GATES:
        return ((InternalEList<?>)getGates()).basicRemove(otherEnd, msgs);
      case DftPackage.GALILEO_DFT__BASIC_EVENTS:
        return ((InternalEList<?>)getBasicEvents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_DFT__ROOT:
        if (resolve) return getRoot();
        return basicGetRoot();
      case DftPackage.GALILEO_DFT__GATES:
        return getGates();
      case DftPackage.GALILEO_DFT__BASIC_EVENTS:
        return getBasicEvents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_DFT__ROOT:
        setRoot((GalileoFaultTreeNode)newValue);
        return;
      case DftPackage.GALILEO_DFT__GATES:
        getGates().clear();
        getGates().addAll((Collection<? extends GalileoFaultTreeNode>)newValue);
        return;
      case DftPackage.GALILEO_DFT__BASIC_EVENTS:
        getBasicEvents().clear();
        getBasicEvents().addAll((Collection<? extends GalileoFaultTreeNode>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_DFT__ROOT:
        setRoot((GalileoFaultTreeNode)null);
        return;
      case DftPackage.GALILEO_DFT__GATES:
        getGates().clear();
        return;
      case DftPackage.GALILEO_DFT__BASIC_EVENTS:
        getBasicEvents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_DFT__ROOT:
        return root != null;
      case DftPackage.GALILEO_DFT__GATES:
        return gates != null && !gates.isEmpty();
      case DftPackage.GALILEO_DFT__BASIC_EVENTS:
        return basicEvents != null && !basicEvents.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //GalileoDftImpl
