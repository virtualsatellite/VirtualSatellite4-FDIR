/**
 * generated by Xtext 2.18.0.M3
 */
package de.dlr.sc.virsat.fdir.galileo.dft.impl;

import de.dlr.sc.virsat.fdir.galileo.dft.DftPackage;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoFaultTreeNode;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoNodeType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Galileo Node Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoNodeTypeImpl#getTypeName <em>Type Name</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoNodeTypeImpl#getObservables <em>Observables</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoNodeTypeImpl#getObservationRate <em>Observation Rate</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoNodeTypeImpl#getRateFactor <em>Rate Factor</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoNodeTypeImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GalileoNodeTypeImpl extends MinimalEObjectImpl.Container implements GalileoNodeType
{
  /**
   * The default value of the '{@link #getTypeName() <em>Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeName()
   * @generated
   * @ordered
   */
  protected static final String TYPE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeName() <em>Type Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeName()
   * @generated
   * @ordered
   */
  protected String typeName = TYPE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getObservables() <em>Observables</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservables()
   * @generated
   * @ordered
   */
  protected EList<GalileoFaultTreeNode> observables;

  /**
   * The default value of the '{@link #getObservationRate() <em>Observation Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservationRate()
   * @generated
   * @ordered
   */
  protected static final String OBSERVATION_RATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getObservationRate() <em>Observation Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservationRate()
   * @generated
   * @ordered
   */
  protected String observationRate = OBSERVATION_RATE_EDEFAULT;

  /**
   * The default value of the '{@link #getRateFactor() <em>Rate Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRateFactor()
   * @generated
   * @ordered
   */
  protected static final String RATE_FACTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRateFactor() <em>Rate Factor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRateFactor()
   * @generated
   * @ordered
   */
  protected String rateFactor = RATE_FACTOR_EDEFAULT;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final String TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected String time = TIME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GalileoNodeTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DftPackage.Literals.GALILEO_NODE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeName()
  {
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeName(String newTypeName)
  {
    String oldTypeName = typeName;
    typeName = newTypeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_NODE_TYPE__TYPE_NAME, oldTypeName, typeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GalileoFaultTreeNode> getObservables()
  {
    if (observables == null)
    {
      observables = new EObjectResolvingEList<GalileoFaultTreeNode>(GalileoFaultTreeNode.class, this, DftPackage.GALILEO_NODE_TYPE__OBSERVABLES);
    }
    return observables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getObservationRate()
  {
    return observationRate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObservationRate(String newObservationRate)
  {
    String oldObservationRate = observationRate;
    observationRate = newObservationRate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_NODE_TYPE__OBSERVATION_RATE, oldObservationRate, observationRate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRateFactor()
  {
    return rateFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRateFactor(String newRateFactor)
  {
    String oldRateFactor = rateFactor;
    rateFactor = newRateFactor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_NODE_TYPE__RATE_FACTOR, oldRateFactor, rateFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(String newTime)
  {
    String oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_NODE_TYPE__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_NODE_TYPE__TYPE_NAME:
        return getTypeName();
      case DftPackage.GALILEO_NODE_TYPE__OBSERVABLES:
        return getObservables();
      case DftPackage.GALILEO_NODE_TYPE__OBSERVATION_RATE:
        return getObservationRate();
      case DftPackage.GALILEO_NODE_TYPE__RATE_FACTOR:
        return getRateFactor();
      case DftPackage.GALILEO_NODE_TYPE__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_NODE_TYPE__TYPE_NAME:
        setTypeName((String)newValue);
        return;
      case DftPackage.GALILEO_NODE_TYPE__OBSERVABLES:
        getObservables().clear();
        getObservables().addAll((Collection<? extends GalileoFaultTreeNode>)newValue);
        return;
      case DftPackage.GALILEO_NODE_TYPE__OBSERVATION_RATE:
        setObservationRate((String)newValue);
        return;
      case DftPackage.GALILEO_NODE_TYPE__RATE_FACTOR:
        setRateFactor((String)newValue);
        return;
      case DftPackage.GALILEO_NODE_TYPE__TIME:
        setTime((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_NODE_TYPE__TYPE_NAME:
        setTypeName(TYPE_NAME_EDEFAULT);
        return;
      case DftPackage.GALILEO_NODE_TYPE__OBSERVABLES:
        getObservables().clear();
        return;
      case DftPackage.GALILEO_NODE_TYPE__OBSERVATION_RATE:
        setObservationRate(OBSERVATION_RATE_EDEFAULT);
        return;
      case DftPackage.GALILEO_NODE_TYPE__RATE_FACTOR:
        setRateFactor(RATE_FACTOR_EDEFAULT);
        return;
      case DftPackage.GALILEO_NODE_TYPE__TIME:
        setTime(TIME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_NODE_TYPE__TYPE_NAME:
        return TYPE_NAME_EDEFAULT == null ? typeName != null : !TYPE_NAME_EDEFAULT.equals(typeName);
      case DftPackage.GALILEO_NODE_TYPE__OBSERVABLES:
        return observables != null && !observables.isEmpty();
      case DftPackage.GALILEO_NODE_TYPE__OBSERVATION_RATE:
        return OBSERVATION_RATE_EDEFAULT == null ? observationRate != null : !OBSERVATION_RATE_EDEFAULT.equals(observationRate);
      case DftPackage.GALILEO_NODE_TYPE__RATE_FACTOR:
        return RATE_FACTOR_EDEFAULT == null ? rateFactor != null : !RATE_FACTOR_EDEFAULT.equals(rateFactor);
      case DftPackage.GALILEO_NODE_TYPE__TIME:
        return TIME_EDEFAULT == null ? time != null : !TIME_EDEFAULT.equals(time);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typeName: ");
    result.append(typeName);
    result.append(", observationRate: ");
    result.append(observationRate);
    result.append(", rateFactor: ");
    result.append(rateFactor);
    result.append(", time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //GalileoNodeTypeImpl
