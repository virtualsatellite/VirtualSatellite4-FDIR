/**
 * generated by Xtext 2.18.0.M3
 */
package de.dlr.sc.virsat.fdir.galileo.dft.impl;

import de.dlr.sc.virsat.fdir.galileo.dft.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DftFactoryImpl extends EFactoryImpl implements DftFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DftFactory init()
  {
    try
    {
      DftFactory theDftFactory = (DftFactory)EPackage.Registry.INSTANCE.getEFactory(DftPackage.eNS_URI);
      if (theDftFactory != null)
      {
        return theDftFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DftFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DftFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DftPackage.GALILEO_DFT: return createGalileoDft();
      case DftPackage.GALILEO_FAULT_TREE_NODE: return createGalileoFaultTreeNode();
      case DftPackage.GALILEO_NODE_TYPE: return createGalileoNodeType();
      case DftPackage.NAMED: return createNamed();
      case DftPackage.OBSERVER: return createObserver();
      case DftPackage.PARAMETRIZED: return createParametrized();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GalileoDft createGalileoDft()
  {
    GalileoDftImpl galileoDft = new GalileoDftImpl();
    return galileoDft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GalileoFaultTreeNode createGalileoFaultTreeNode()
  {
    GalileoFaultTreeNodeImpl galileoFaultTreeNode = new GalileoFaultTreeNodeImpl();
    return galileoFaultTreeNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GalileoNodeType createGalileoNodeType()
  {
    GalileoNodeTypeImpl galileoNodeType = new GalileoNodeTypeImpl();
    return galileoNodeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Named createNamed()
  {
    NamedImpl named = new NamedImpl();
    return named;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Observer createObserver()
  {
    ObserverImpl observer = new ObserverImpl();
    return observer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parametrized createParametrized()
  {
    ParametrizedImpl parametrized = new ParametrizedImpl();
    return parametrized;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DftPackage getDftPackage()
  {
    return (DftPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DftPackage getPackage()
  {
    return DftPackage.eINSTANCE;
  }

} //DftFactoryImpl
