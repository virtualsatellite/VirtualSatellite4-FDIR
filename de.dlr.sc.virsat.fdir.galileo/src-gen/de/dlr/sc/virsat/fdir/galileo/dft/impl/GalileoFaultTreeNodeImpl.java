/**
 * generated by Xtext 2.18.0.M3
 */
package de.dlr.sc.virsat.fdir.galileo.dft.impl;

import de.dlr.sc.virsat.fdir.galileo.dft.DftPackage;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoFaultTreeNode;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoNodeType;
import de.dlr.sc.virsat.fdir.galileo.dft.GalileoRepairAction;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Galileo Fault Tree Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getType <em>Type</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getChildren <em>Children</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getLambda <em>Lambda</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getProb <em>Prob</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getDorm <em>Dorm</em>}</li>
 *   <li>{@link de.dlr.sc.virsat.fdir.galileo.dft.impl.GalileoFaultTreeNodeImpl#getRepairActions <em>Repair Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GalileoFaultTreeNodeImpl extends MinimalEObjectImpl.Container implements GalileoFaultTreeNode
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected GalileoNodeType type;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<GalileoFaultTreeNode> children;

  /**
   * The default value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected static final String LAMBDA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLambda() <em>Lambda</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLambda()
   * @generated
   * @ordered
   */
  protected String lambda = LAMBDA_EDEFAULT;

  /**
   * The default value of the '{@link #getProb() <em>Prob</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProb()
   * @generated
   * @ordered
   */
  protected static final String PROB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProb() <em>Prob</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProb()
   * @generated
   * @ordered
   */
  protected String prob = PROB_EDEFAULT;

  /**
   * The default value of the '{@link #getDorm() <em>Dorm</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDorm()
   * @generated
   * @ordered
   */
  protected static final String DORM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDorm() <em>Dorm</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDorm()
   * @generated
   * @ordered
   */
  protected String dorm = DORM_EDEFAULT;

  /**
   * The cached value of the '{@link #getRepairActions() <em>Repair Actions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepairActions()
   * @generated
   * @ordered
   */
  protected EList<GalileoRepairAction> repairActions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GalileoFaultTreeNodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DftPackage.Literals.GALILEO_FAULT_TREE_NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GalileoNodeType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(GalileoNodeType newType, NotificationChain msgs)
  {
    GalileoNodeType oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(GalileoNodeType newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DftPackage.GALILEO_FAULT_TREE_NODE__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DftPackage.GALILEO_FAULT_TREE_NODE__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GalileoFaultTreeNode> getChildren()
  {
    if (children == null)
    {
      children = new EObjectResolvingEList<GalileoFaultTreeNode>(GalileoFaultTreeNode.class, this, DftPackage.GALILEO_FAULT_TREE_NODE__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLambda()
  {
    return lambda;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLambda(String newLambda)
  {
    String oldLambda = lambda;
    lambda = newLambda;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__LAMBDA, oldLambda, lambda));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProb()
  {
    return prob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProb(String newProb)
  {
    String oldProb = prob;
    prob = newProb;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__PROB, oldProb, prob));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDorm()
  {
    return dorm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDorm(String newDorm)
  {
    String oldDorm = dorm;
    dorm = newDorm;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DftPackage.GALILEO_FAULT_TREE_NODE__DORM, oldDorm, dorm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GalileoRepairAction> getRepairActions()
  {
    if (repairActions == null)
    {
      repairActions = new EObjectContainmentEList<GalileoRepairAction>(GalileoRepairAction.class, this, DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS);
    }
    return repairActions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_FAULT_TREE_NODE__TYPE:
        return basicSetType(null, msgs);
      case DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS:
        return ((InternalEList<?>)getRepairActions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_FAULT_TREE_NODE__NAME:
        return getName();
      case DftPackage.GALILEO_FAULT_TREE_NODE__TYPE:
        return getType();
      case DftPackage.GALILEO_FAULT_TREE_NODE__CHILDREN:
        return getChildren();
      case DftPackage.GALILEO_FAULT_TREE_NODE__LAMBDA:
        return getLambda();
      case DftPackage.GALILEO_FAULT_TREE_NODE__PROB:
        return getProb();
      case DftPackage.GALILEO_FAULT_TREE_NODE__DORM:
        return getDorm();
      case DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS:
        return getRepairActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_FAULT_TREE_NODE__NAME:
        setName((String)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__TYPE:
        setType((GalileoNodeType)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends GalileoFaultTreeNode>)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__LAMBDA:
        setLambda((String)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__PROB:
        setProb((String)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__DORM:
        setDorm((String)newValue);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS:
        getRepairActions().clear();
        getRepairActions().addAll((Collection<? extends GalileoRepairAction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_FAULT_TREE_NODE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__TYPE:
        setType((GalileoNodeType)null);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__CHILDREN:
        getChildren().clear();
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__LAMBDA:
        setLambda(LAMBDA_EDEFAULT);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__PROB:
        setProb(PROB_EDEFAULT);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__DORM:
        setDorm(DORM_EDEFAULT);
        return;
      case DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS:
        getRepairActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DftPackage.GALILEO_FAULT_TREE_NODE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DftPackage.GALILEO_FAULT_TREE_NODE__TYPE:
        return type != null;
      case DftPackage.GALILEO_FAULT_TREE_NODE__CHILDREN:
        return children != null && !children.isEmpty();
      case DftPackage.GALILEO_FAULT_TREE_NODE__LAMBDA:
        return LAMBDA_EDEFAULT == null ? lambda != null : !LAMBDA_EDEFAULT.equals(lambda);
      case DftPackage.GALILEO_FAULT_TREE_NODE__PROB:
        return PROB_EDEFAULT == null ? prob != null : !PROB_EDEFAULT.equals(prob);
      case DftPackage.GALILEO_FAULT_TREE_NODE__DORM:
        return DORM_EDEFAULT == null ? dorm != null : !DORM_EDEFAULT.equals(dorm);
      case DftPackage.GALILEO_FAULT_TREE_NODE__REPAIR_ACTIONS:
        return repairActions != null && !repairActions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", lambda: ");
    result.append(lambda);
    result.append(", prob: ");
    result.append(prob);
    result.append(", dorm: ");
    result.append(dorm);
    result.append(')');
    return result.toString();
  }

} //GalileoFaultTreeNodeImpl
