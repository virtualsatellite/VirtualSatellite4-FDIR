/*******************************************************************************

 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
Concept de.dlr.sc.virsat.model.extension.fdir displayname "FDIR" description "VirSat DLR FDIR Concept"  version 1.1
{
	
	/* Components for describing the fault model */
	
	Category FaultTreeNode {
		
	}
	
	Category FaultEvent extends FaultTreeNode {
		IsAbstract;
	}
	
	Category Gate extends FaultTreeNode {
		IsAbstract;
	}
	
	Category AND extends Gate {
		
	}
	
	Category OR extends Gate {
		
	}
	
	Category VOTE extends Gate {
		IntProperty votingThreshold default 0 quantityKind "Dimensionless" unit "No Unit";
	}
	
	Category PAND extends Gate {
		
	}
	
	Category SPARE extends Gate {
		
	}
	
	Category POR extends Gate {
		
	}
	
	Category SAND extends Gate {
		
	}
	
	Category PORI extends Gate {
		
	}
	
	Category PANDI extends Gate {
		
	}
	
	Category OBSERVER extends Gate {
		FloatProperty observationRate default 0 quantityKind "Frequency" unit "Hertz";
	}
	
	Category DELAY extends Gate {
		FloatProperty time default 0 quantityKind "Time" unit "Second";
	}
	
	Category ADEP extends Gate {
		IsAbstract;
	}
	
	Category FDEP extends ADEP {
		
	}
	
	Category RDEP extends ADEP {
		FloatProperty rateChange quantityKind "Frequency" unit "Per Hour" default 0.0 description "The change of hot failure rate at the target event when the trigger occurs. ";
	}
	
	Category PDEP extends ADEP {
		FloatProperty probability quantityKind "Dimensionless" unit "Percent" default 0.0 description "The probability that the Probabilistic Dependency Gate fires the dependent events.";
	}
	
	Category AbstractFaultTreeEdge {
		IsAbstract;
		Reference from of Type FaultTreeNode;
		Reference to of Type FaultTreeNode;
	}
	
	Category FaultTreeEdge extends AbstractFaultTreeEdge {
		
	}
	
	Category FaultTree {
		Type gates[] of Category Gate;
		Type propagations[] of Category FaultTreeEdge;
		Type spares[] of Category FaultTreeEdge;
		Type deps[] of Category FaultTreeEdge;
		Type observations[] of Category FaultTreeEdge;
	}
	
	Category Fault extends FaultEvent {
		Applicable For All;
		
		StringProperty detail description "A description giving more details about this fault";
		Type basicEvents[] of Category BasicEvent description "Failure modes that directly cause this Fault";
		
		EnumProperty severity values [
			Catastrophic=4, Critical=3, Major=2, Minor=1, Unknown=0
		] default Minor quantityKind "Dimensionless" unit "No Unit" description "Severity Level according to ECSS-Q-ST-30-02C";
	
		Type faultTree of Category FaultTree description "The Fault Tree explaining the indirect causes of this Fault";
		Type reliabilityAnalysis[] of Category ReliabilityAnalysis description "Optional reliability analysis information for this single fault";
		Type availabilityAnalysis[] of Category AvailabilityAnalysis description "Optional availability analysis information for this single fault";
		Type detectabilityAnalysis[] of Category DetectabilityAnalysis description "Optional detectability analysis information for this single fault";
	}
	
	Category BasicEvent extends FaultEvent {
		FloatProperty hotFailureRate default 0.0 quantityKind "Frequency" unit "Per Hour";
		FloatProperty coldFailureRate default 0.0 quantityKind "Frequency" unit "Per Hour";
		FloatProperty repairRate default 0.0 quantityKind "Frequency" unit "Per Hour";
		StringProperty repairAction description "Description of the action(s) needed to be performed for the repair.";
	}
	
	Category CutSet {
		Reference failure of Type Fault description "The failure that occurs if the basic events occur";
		Reference basicEvents [] of Type BasicEvent description "Set of events leading to a top level failure";
		
		EnumProperty severity values [
			Catastrophic=4, Critical=3, Major=2, Minor=1, Unknown=0
		] quantityKind "Dimensionless" unit "No Unit" description "Severity Level according to ECSS-Q-ST-30-02C";
		EnumProperty probability values [
			Unknown=0, ExtremelyRemote=1, Remote=2, Occasional=3, Probable=4
		] quantityKind "Dimensionless" unit "No Unit" description "Probability Level according to ECSS-Q-ST-30-02C";
		EnumProperty detection values [
			Unknown=0, ExtremelyUnlikely=4, Unlikely=3, Likely=2, VeryLikely=1
		] default VeryLikely quantityKind "Dimensionless" unit "No Unit" description "Detection Level for probability of detection according to ECSS-Q-ST-30-02C";
		FloatProperty criticality default 0 quantityKind "Dimensionless" unit "No Unit" description "Criticality Level according to ECSS-Q-ST-30-02C";
		
		FloatProperty meanTimeToFailure quantityKind "Time" unit "Hour" description "Mean Time To Failure obtained from the Fault Tree Analysis";
		FloatProperty steadyStateDetectability quantityKind "Dimensionless" unit "Percent"  description "Steady State Detectability obtained from the Fault Tree Analysis";
		FloatProperty meanTimeToDetection quantityKind "Time" unit "Hour" description "Mean Time To Detection obtained from the Fault Tree Analysis";
	
		// Approximate the failure rate to a constant failure rate
		Ref: probability = classifyPL(1 / meanTimeToFailure);
		Ref: detection = classifyDL(steadyStateDetectability);
		
		// Criticality Level Computation according to ECSS-Q-ST-30-02C
		Ref: criticality = severity * probability * detection;
	}
	
	Category CriticalityVector {
		BooleanProperty isCritical[4] default false;
	}
	
	Category CriticalityMatrix {
		Type criticalityMatrix[4] of Category CriticalityVector;
	}
	
	Category FDIRParameters {
		Applicable For All;
		Cardinality 1;
		FloatProperty missionTime quantityKind "Time" unit "Hour";
		FloatProperty timestep quantityKind "Time" unit "Hour" default 0.1;
		FloatProperty probabilityLevels[4] quantityKind "Frequency" unit "Per Hour";
		FloatProperty detectionLevels[4] quantityKind "Dimensionless" unit "Percent";
		
		Type criticalityMatrices[4] of Category CriticalityMatrix;
	}
	
	Category FMECA {
		Applicable For All;
		Cardinality 1;
		Type entries[] of Category FMECAEntry;
	}
	
	Category FMECAEntry {
		Reference failure of Type Fault description "The loss of a function / item";
		Reference failureMode of Type FaultEvent description "The specific manner in which the failure occurs";
		Reference failureCause of Type FaultEvent description "The cause of the failure mode";
		Reference failureEffects[] of Type Fault description "The items / functions affected by the failure"; 
		
		EnumProperty severity values [
			Catastrophic=4, Critical=3, Major=2, Minor=1, Unknown=0
		] quantityKind "Dimensionless" unit "No Unit" description "Severity Level according to ECSS-Q-ST-30-02C";
		EnumProperty probability values [
			Unknown=0, ExtremelyRemote=1, Remote=2, Occasional=3, Probable=4
		] quantityKind "Dimensionless" unit "No Unit" description "Probability Level according to ECSS-Q-ST-30-02C";
		FloatProperty criticality default 0 quantityKind "Dimensionless" unit "No Unit" description "Criticality Level according to ECSS-Q-ST-30-02C";
	
		FloatProperty meanTimeToFailure quantityKind "Time" unit "Hour" description "Mean Time To Failure obtained from the Fault Tree Analysis";
		StringProperty compensation[] description "The compensation of the fault, for example a recovery action.";
		
		// Approximate the failure rate to a constant failure rate
		Ref: probability = classifyPL(1 / meanTimeToFailure);
		
		// Criticality Level Computation according to ECSS-Q-ST-30-02C
		Ref: criticality = severity * probability;
	}
	
	Category ReliabilityAnalysis {
		Cardinality 1;
		FloatProperty remainingMissionTime quantityKind "Time" unit "Hour";
		FloatProperty timestep quantityKind "Time" unit "Hour" default 0.1;
		FloatProperty reliability quantityKind "Dimensionless" unit "Percent";
		FloatProperty meanTimeToFailure quantityKind "Time" unit "Hour";
		FloatProperty reliabilityCurve[] quantityKind "Dimensionless" unit "Percent";
		
		Ref: remainingMissionTime = FDIRParameters.missionTime;
		Ref: timestep = FDIRParameters.timestep;
	}	
	
	Category AvailabilityAnalysis {
		Cardinality 1;
		FloatProperty remainingMissionTime quantityKind "Time" unit "Hour";
		FloatProperty timestep quantityKind "Time" unit "Hour" default 0.1;
		FloatProperty availability quantityKind "Dimensionless" unit "Percent";
		FloatProperty steadyStateAvailability quantityKind "Dimensionless" unit "Percent";
		FloatProperty availabilityCurve[] quantityKind "Dimensionless" unit "Percent";
		
		Ref: remainingMissionTime = FDIRParameters.missionTime;
		Ref: timestep = FDIRParameters.timestep;
	}
	
	Category DetectabilityAnalysis {
		Cardinality 1;
		FloatProperty remainingMissionTime quantityKind "Time" unit "Hour";
		FloatProperty timestep quantityKind "Time" unit "Hour" default 0.1;
		FloatProperty detectability quantityKind "Dimensionless" unit "Percent";
		FloatProperty steadyStateDetectability quantityKind "Dimensionless" unit "Percent";
		FloatProperty meanTimeToDetection quantityKind "Time" unit "Hour";
		FloatProperty detectabilityCurve[] quantityKind "Dimensionless" unit "Percent";
		
		Ref: remainingMissionTime = FDIRParameters.missionTime;
		Ref: timestep = FDIRParameters.timestep;
	}
	
	Category MCSAnalysis {
		Applicable For All;
		Cardinality 1;
		IntProperty maxMinimumCutSetSize default 0 unit "No Unit";
		IntProperty faultTolerance unit "No Unit";
		Type minimumCutSets [] of Category CutSet;
	}
	
	/* Components for describing FDIR Requirements */
	
	Category FDIRRequirement {
		IsAbstract;
		Applicable For All;
	}
	
	Category ReliabilityRequirement extends FDIRRequirement {	
		Cardinality 1;
		FloatProperty minReliability default 0.0 quantityKind "Dimensionless" unit "Percent";
		FloatProperty maxCriticality default 0.0 quantityKind "Dimensionless" unit "No Unit";
	}
	
	Category FaultToleranceRequirement extends FDIRRequirement {	
		Cardinality 1;
		IntProperty minFaultTolerance default 0 quantityKind "Dimensionless" unit "No Unit";
	}
	
	/* Components for describing recovery behavior */
	
	Category RecoveryAutomaton {
		Applicable For All;
		Cardinality 1;
		Reference initial of Type State;
		Type states [] of Category State;
		Type transitions [] of Category Transition;
	}

	Category RecoveryAction {
		IsAbstract;
	}

	Category ClaimAction extends RecoveryAction {
		Reference spareGate of Type SPARE;
		Reference claimSpare of Type FaultTreeNode;
	}
	
	Category FreeAction extends RecoveryAction {
		Reference freeSpare of Type FaultTreeNode;	
	}

	Category State {
		
	}

	Category Transition {
		IsAbstract;
		Reference from of Type State;
		Reference to of Type State;
		Type recoveryActions [] of Category RecoveryAction;
	}
	
	Category FaultEventTransition extends Transition {
		Reference guards [] of Type FaultTreeNode;
		BooleanProperty isRepair default false;
	}
	
	Category TimedTransition extends Transition {
		FloatProperty time default 0.0 quantityKind "Time" unit "Second";
	}
}

